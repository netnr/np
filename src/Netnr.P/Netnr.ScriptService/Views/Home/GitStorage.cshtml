<style>
    .nr-upbox {
        user-select: none;
        border-style: dashed !important;
    }

        .nr-upbox ul {
            margin: 0;
            padding: 10px;
            display: flex;
            justify-content: space-between;
            flex-wrap: wrap;
        }

            .nr-upbox ul li {
                width: 200px;
                height: 180px;
                margin: 10px;
                display: flex;
                position: relative;
                align-items: center;
                list-style: none;
                border-radius: 6px;
                border: 1px solid rgba(0,0,0,.125);
            }

                .nr-upbox ul li.flex-repair-item {
                    border-color: transparent;
                }

                .nr-upbox ul li img {
                    margin: auto;
                    max-width: 90%;
                    max-height: 70%;
                }

                .nr-upbox ul li svg {
                    color: #666;
                    width: 100%;
                    height: 100%;
                    pointer-events: none;
                    border: 15px solid transparent;
                }

    .nr-path {
        position: absolute;
        zoom: .7;
        bottom: 0;
        opacity: .7;
        width: 100%;
        border: none;
        padding: 5px;
        outline: none;
        text-align: center;
    }

    .nr-upload-status-ok::after {
        content: "‚úî";
        position: absolute;
        top: 0;
        right: 5px;
        font-size: 1.3em;
    }

    .nr-upload-status-fail::after {
        content: "‚õî";
        position: absolute;
        top: 0;
        right: 5px;
        font-size: 1.3em;
    }

    .nr-upload-status-ing::after {
        content: "üïõ";
        position: absolute;
        top: 0;
        right: 5px;
        font-size: 1.3em;
        animation: rotate 4s ease-in-out infinite;
    }

    @@keyframes rotate {
        from {
            transform: rotate(0deg)
        }

        to {
            transform: rotate(359deg)
        }
    }

    .nr-link-template {
        display: none;
    }

    .nr-file {
        position: absolute;
        opacity: 0;
        width: 100%;
        height: 100%;
        cursor: pointer;
    }
</style>

<div class="container-fluid mt-3">
    <div class="row">
        <div class="col-md-3">
            <div class="input-group mb-3">
                <span class="input-group-text">owner / repo</span>
                <input class="nr-or form-control" placeholder="ÂøÖÂ°´ÔºåÁî®Êà∑/‰ªìÂ∫ìÔºå‰æãÔºönetnr/np">
            </div>
        </div>
        <div class="col-md-4">
            <div class="input-group mb-3">
                <a class="btn btn-secondary" href="https://github.com/settings/tokens" target="_blank">token</a>
                <input class="nr-token form-control" placeholder="ÂøÖÂ°´ÔºåËÆøÈóÆ‰ªìÂ∫ìÁöÑ tokenÔºåÈïøÂ∫¶ 40">
            </div>
        </div>
        <div class="col-auto">
            <select class="form-control nr-proxy">
                <option value="">ÔºàÈÄâÊã©‰ª£ÁêÜÔºâ</option>
                <option title="Cloudflare Workers" value="https://cors.eu.org/">cors.eu.org</option>
                <option title="Heroku + Cloudflare" value="https://www.netnr.eu.org/api/v1/Proxy/?url=">www.netnr.eu.org</option>
            </select>
        </div>
        <div class="col-auto">
            <button class="btn btn-warning nr-btn-upload mb-3">Upload</button>
        </div>

        <div class="col-md-12 mb-3">
            <div class="border border-2 rounded nr-upbox">
                <ul class="nr-list">
                    <li class="nr-upload-choose">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                            <path fill-rule="evenodd" d="M7.646 5.146a.5.5 0 0 1 .708 0l2 2a.5.5 0 0 1-.708.708L8.5 6.707V10.5a.5.5 0 0 1-1 0V6.707L6.354 7.854a.5.5 0 1 1-.708-.708l2-2z" />
                            <path d="M4.406 3.342A5.53 5.53 0 0 1 8 2c2.69 0 4.923 2 5.166 4.579C14.758 6.804 16 8.137 16 9.773 16 11.569 14.502 13 12.687 13H3.781C1.708 13 0 11.366 0 9.318c0-1.763 1.266-3.223 2.942-3.593.143-.863.698-1.723 1.464-2.383zm.653.757c-.757.653-1.153 1.44-1.153 2.056v.448l-.445.049C2.064 6.805 1 7.952 1 9.318 1 10.785 2.23 12 3.781 12h8.906C13.98 12 15 10.988 15 9.773c0-1.216-1.02-2.228-2.313-2.228h-.5v-.5C12.188 4.825 10.328 3 8 3a4.53 4.53 0 0 0-2.941 1.1z" />
                        </svg>
                        <input type="file" class="nr-file" multiple />
                    </li>
                </ul>
            </div>
        </div>

        <div class="col-md-12 nr-links">
            <div class="input-group mb-3 nr-link-template">
                <button class="btn btn-outline-dark dropdown-toggle" data-bs-toggle="dropdown">Vendor</button>
                <ul class="dropdown-menu">
                    <li><button class="dropdown-item" type="button" data-cmd="github">GitHub</button></li>
                    <li><button class="dropdown-item" type="button" data-cmd="jsdelivr">jsDelivr</button></li>
                </ul>
                <a class="btn btn-outline-dark" href="#" target="_blank" data-cmd="open">Open</a>
                <input class="form-control">
                <button class="btn btn-outline-dark" data-cmd="copy">Copy</button>
            </div>
        </div>
    </div>

</div>

<script>

    var fr = {
        build: function (se) {
            var box = document.querySelector(se), si, defer = 500, repairClass = 'flex-repair-item';

            new ResizeObserver(function () {
                //ÁßªÈô§‰øÆË°•
                box.querySelectorAll('.' + repairClass).forEach(item => item.remove());

                clearTimeout(si);

                si = setTimeout(function () {
                    var childs = box.children, len = childs.length;

                    var index = 0, one = childs[0];
                    for (var i = 0; i < len; i++) {
                        var node = childs[i];
                        if (node.offsetTop != one.offsetTop) {
                            index = i;
                            break;
                        }
                    }
                    var repair = index > 1 ? index - len % index : 0;
                    if (repair == i) {
                        repair = 0;
                    }

                    //Á¨¨‰∏ÄË°å‰∏çË∂≥Ë°•ÈΩê
                    if (repair == 0) {
                        var pw = getComputedStyle(box, null).padding.match(/\d+/)[0] * 2;
                        var mw = getComputedStyle(one, null).margin.match(/\d+/)[0] * 2;
                        var rownum = Math.floor((box.parentNode.clientWidth - pw) / (one.offsetWidth + mw));
                        if (len < rownum) {
                            repair = rownum - len;
                        }
                    }

                    //Ë°•ÈΩê
                    while (repair--) {
                        var nn = one.cloneNode();
                        nn.className = '';
                        nn.classList.add(repairClass);
                        box.appendChild(nn)
                    }
                }, defer);
            }).observe(box);
        }
    }

    fr.build('.nr-list');

    var gs = {
        files: [],
        init: function () {

            //ÁºìÂ≠ò or„ÄÅtoken
            document.querySelector('.nr-or').value = ss.lsStr('or');
            document.querySelector('.nr-token').value = ss.lsStr('token');

            document.querySelector('.nr-or').addEventListener('input', function () {
                ss.ls["or"] = this.value;
                ss.lsSave();
            }, false);
            document.querySelector('.nr-token').addEventListener('input', function () {
                if (this.value == "" || this.value.length == 40) {
                    ss.ls["token"] = this.value;
                    ss.lsSave();
                }
            }, false);

            //ÊãñÊãΩ
            "dragleave dragenter dragover drop".split(' ').forEach(en => {
                document.addEventListener(en, function (e) {
                    e.stopPropagation();
                    e.preventDefault();
                }, false)
            });
            document.addEventListener('drop', function (e) {
                var files = (e.dataTransfer || e.originalEvent.dataTransfer).files;
                if (files && files.length) {
                    for (var i = 0; i < files.length; i++) {
                        var file = files[i];
                        gs.add(file);
                    }
                }
            }, false);

            //Á≤òË¥¥
            document.addEventListener('paste', function (event) {
                if (event.clipboardData || event.originalEvent) {
                    var clipboardData = (event.clipboardData || event.originalEvent.clipboardData);
                    if (clipboardData.items) {
                        var items = clipboardData.items, len = items.length;
                        for (var i = 0; i < len; i++) {
                            var blob = items[i].getAsFile();
                            gs.add(blob);
                        }
                    }
                }
            });

            //ÈÄâÊã©Êñá‰ª∂
            document.querySelector('.nr-file').addEventListener('change', function () {
                var files = this.files;
                for (var i = 0; i < files.length; i++) {
                    gs.add(files[i]);
                }
            }, false);

            //‰∏ä‰º†
            document.querySelector('.nr-btn-upload').addEventListener('click', function () {
                if (gs.uploading) {
                    gs.msg('Uploading ...');
                } else if (gs.files.length == 0) {
                    gs.msg('Please select or drag and drop files');
                } else {
                    gs.uploading = true;
                    gs.fi = 0;

                    var next = function () {
                        if (gs.fi < gs.files.length) {
                            var fobj = gs.files[gs.fi++];
                            gs.upload(fobj).then(() => next()).catch(() => next());
                        } else {
                            gs.uploading = false;
                        }
                    }
                    next();
                }
            }, false);

            //ÁÇπÂáª
            document.querySelector('.nr-links').addEventListener('click', function (e) {
                var target = e.target, cmd = target.dataset.cmd;
                if (cmd == "copy") {
                    navigator.clipboard.writeText(target.previousElementSibling.value);
                } else if (["github", "jsdelivr"].includes(cmd)) {
                    var itembox = target.parentElement.parentElement.parentElement;
                    var val = target.dataset.value;
                    itembox.querySelector('input').value = val;
                    itembox.querySelector('[data-cmd="open"]').href = val;
                }
            }, false);
        },
        setStatus: function (fobj, status) {
            fobj.status = status;

            fobj.node.classList.remove('nr-upload-status-ok');
            fobj.node.classList.remove('nr-upload-status-ing');
            fobj.node.classList.remove('nr-upload-status-fail');

            fobj.node.classList.add('nr-upload-status-' + status);
        },
        pad: function (s, len) {
            return (s + '').padStart(len || 2, '0');
        },
        getFileName: function (file) {
            var now = new Date();
            var ext = file.split('.').pop();
            var filename = `${now.getFullYear()}/${gs.pad(now.getMonth() + 1)}/${gs.pad(now.getDate())}/${gs.pad(now.getHours())}${gs.pad(now.getMinutes())}${gs.pad(now.getSeconds())}${gs.pad(now.getMilliseconds(), 3)}.${ext}`
            return filename;
        },
        add: function (file) {
            return new Promise(function (resolve) {
                var r = new FileReader();
                r.onload = function (e) {

                    var cover = e.target.result;
                    if (!cover.includes(":image")) {
                        cover = '/favicon.svg';
                    }

                    var li = document.createElement('li');
                    li.innerHTML = `<img src='${cover}'><input class="nr-path" placeholder="yyyy/MM/dd/xx.ext" value="${gs.getFileName(file.name)}">`;
                    document.querySelector('.nr-list').insertBefore(li, document.querySelector('.nr-upload-choose'));

                    gs.files.push({
                        file: file,
                        node: li,
                        base64: e.target.result.split(',').pop(),
                        status: 'ready'
                    })

                    resolve();
                }
                r.readAsDataURL(file);
            });
        },
        upload: function (fobj) {
            return new Promise(function (resolve, reject) {
                if (fobj.status == "ok") {
                    resolve();
                } else {
                    var or = document.querySelector('.nr-or').value,
                        token = document.querySelector('.nr-token').value,
                        path = fobj.node.querySelector('.nr-path').value;

                    if (or != "" && or.length > 2 && token.length == 40 && path != "") {
                        fobj.node.classList.add('nr-upload-status-ing');
                        var url = `https://api.github.com/repos/${or}/contents/${path}`;
                        var proxy = document.querySelector('.nr-proxy').value;
                        if (proxy != "") {
                            url = proxy + encodeURIComponent(url);
                        }
                        fetch(url, {
                            method: 'PUT',
                            headers: {
                                Accept: 'application/vnd.github.v3+json',
                                Authorization: 'token ' + token,
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                message: 'm',
                                content: fobj.base64
                            })
                        }).then(x => x.json()).then(res => {
                            console.log(res);

                            if (res.message) {
                                gs.msg(res.message);
                                gs.setStatus(fobj, 'fail');
                                reject();
                            } else {
                                gs.setStatus(fobj, 'ok');

                                var key_github = res.content.download_url,
                                    key_jsdelivr = "https://cdn.jsdelivr.net/gh/" + or + "/" + res.content.path;
                                var linkitem = document.querySelector('.nr-link-template').cloneNode(true);
                                linkitem.classList.remove('nr-link-template');

                                linkitem.querySelector('input').value = key_jsdelivr;
                                linkitem.querySelector('[data-cmd="open"]').href = key_jsdelivr;

                                linkitem.querySelector('[data-cmd="jsdelivr"]').setAttribute('data-value', key_jsdelivr);
                                linkitem.querySelector('[data-cmd="github"]').setAttribute('data-value', key_github);

                                document.querySelector('.nr-links').appendChild(linkitem);

                                resolve();
                            }
                        }).catch(err => {
                            console.log(arguments);
                            gs.setStatus(fobj, 'fail');
                            gs.msg(err + "");
                            reject();
                        })
                    } else {
                        gs.msg('Check : owner repo token path');
                        reject();
                    }
                }
            })
        },
        msg: function (content) {
            bs.msg(content);
        }
    }

    gs.init();
</script>